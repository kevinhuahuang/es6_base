'use strict'

// let fn = function () {
//   this.attr = [0, 1, 2, 3]
// }
//
// let obj = {}
//
// Reflect.apply(fn, obj, [])
// console.log(obj)
//
//
// let result = Reflect.apply(Math.floor, undefined, [1.75]) // 输出：1;
// console.log(result)
// result = Reflect.apply(String.fromCharCode, undefined, [104, 101, 108, 108, 111]) // 输出："hello"
// console.log(result)
// result = Reflect.apply(RegExp.prototype.exec, /ab/, ['confabulation']).index // 输出： 4
// console.log(result)
// result = Reflect.apply(''.charAt, 'ponies', [3]) // 输出："i"
// console.log(result)

// =====================================================================================================================
// Reflect与Proxy联合使用
{
  let Fn = function () {
  }

  Fn.prototype.run = function () {
    console.log('runs out')
  }

  let ProxyFn = new Proxy(Fn, {
    construct (target, argument) {
      console.log('proxy constructor')
      let obj = new target(...argument)
      // Reflect.apply的使用方法
      Reflect.apply(target.prototype.run, obj, argument)
      return obj
    }
  })
  console.log(new ProxyFn())
}

// =====================================================================================================================

// =====================================================================================================================

// =====================================================================================================================

// =====================================================================================================================

// =====================================================================================================================

// =====================================================================================================================

// =====================================================================================================================

// =====================================================================================================================

// =====================================================================================================================

// =====================================================================================================================

// =====================================================================================================================

// =====================================================================================================================

// =====================================================================================================================
